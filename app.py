import streamlit as st
import pandas as pd
import joblib
import numpy as np # ╪к╪г┘Г╪п ┘Е┘Ж ┘И╪м┘И╪п numpy
# ╪к╪г┘Г╪п ┘Е┘Ж ┘Ж┘И╪╣ ┘Е┘И╪п┘К┘Д┘Г (RandomForestClassifier ╪г┘И ╪║┘К╪▒┘З)
from sklearn.ensemble import RandomForestClassifier

# --- Page Configuration ---
st.set_page_config(
    page_title="╪к┘И┘В╪╣ ╪к╪░╪и╪░╪и ╪╣┘Е┘Д╪з╪б ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к",
    page_icon="ЁЯЪЧ",
    layout="centered"
)

# --- Load The Model ---
# ┘З╪░╪з ╪з┘Д┘Е┘И╪п┘К┘Д ╪к┘Е ╪к╪п╪▒┘К╪и┘З ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╣┘Е┘Д╪з╪б ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к╪М ┘И┘Д┘К╪│ ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к.
# ╪з┘Д╪к┘Ж╪и╪д╪з╪к ╪│╪к┘Г┘И┘Ж ╪║┘К╪▒ ╪п┘В┘К┘В╪й ┘Д┘З╪░╪з ╪з┘Д╪│╪и╪и.
try:
    model = joblib.load('models/churn_classifier_model.joblib')
except FileNotFoundError:
    st.error("Model file not found! Please make sure 'churn_classifier_model.joblib' is in the 'models' folder.")
    st.stop()

# --- Define Expected Columns from Training Data ---
# ┘З╪░┘З ╪з┘Д╪г╪╣┘Е╪п╪й ┘З┘К ┘Е┘Ж ┘Е┘И╪п┘К┘Д ╪к╪п╪▒╪и ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╣┘Е┘Д╪з╪б ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к.
# ╪│╪к╪н╪к╪з╪м ┘Д╪к╪н╪п┘К╪л ┘З╪░┘З ╪з┘Д┘В╪з╪ж┘Е╪й ╪и╪з┘Д┘Г╪з┘Е┘Д ╪╣┘Ж╪п ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к.
expected_columns = [
    'SeniorCitizen',
    'tenure',
    'MonthlyCharges',
    'TotalCharges',
    'gender_Male',
    'Partner_Yes',
    'Dependents_Yes',
    'PhoneService_Yes',
    'MultipleLines_No phone service',
    'MultipleLines_Yes',
    'InternetService_Fiber optic',
    'InternetService_No',
    'OnlineSecurity_No internet service',
    'OnlineSecurity_Yes',
    'OnlineBackup_No internet service',
    'OnlineBackup_Yes',
    'DeviceProtection_No internet service',
    'DeviceProtection_Yes',
    'TechSupport_No internet service',
    'TechSupport_Yes',
    'StreamingTV_No internet service',
    'StreamingTV_Yes',
    'StreamingMovies_No internet service',
    'StreamingMovies_Yes',
    'Contract_One year',
    'Contract_Two year',
    'PaperlessBilling_Yes',
    'PaymentMethod_Credit card (automatic)',
    'PaymentMethod_Electronic check',
    'PaymentMethod_Mailed check'
]

# --- App Title and Description ---
st.title('ЁЯЪЧ ╪к┘И┘В╪╣ ╪к╪░╪и╪░╪и ╪╣┘Е┘Д╪з╪б ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к')
st.write(
    "┘К╪│╪з╪╣╪п ┘З╪░╪з ╪з┘Д╪к╪╖╪и┘К┘В ╪┤╪▒┘Г╪й ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к ╪╣┘Д┘Й ╪з┘Д╪к┘Ж╪и╪д ╪и╪з┘Д╪╣┘Е┘Д╪з╪б ╪з┘Д┘Е╪╣╪▒╪╢┘К┘Ж ┘Д╪о╪╖╪▒ ╪з┘Д╪к┘И┘В┘Б ╪╣┘Ж ╪з┘Д╪к╪г╪м┘К╪▒ ╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ╪│┘Д┘И┘Г┘З┘Е ┘И╪к┘Б╪з╪╡┘К┘Д ╪к╪╣╪з┘Е┘Д┘З┘Е."
)
st.write("---")

# --- User Inputs (┘Е╪п╪о┘Д╪з╪к ╪м╪п┘К╪п╪й ┘Д╪┤╪▒┘Г╪й ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к) ---
col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("┘Е╪╣┘Д┘И┘Е╪з╪к ╪з┘Д╪╣┘Е┘К┘Д")
    customer_tenure = st.number_input('┘Е╪п╪й ╪з┘Д╪к╪╣╪з┘Е┘Д ┘Е╪╣ ╪з┘Д╪┤╪▒┘Г╪й (╪и╪з┘Д╪г╪┤┘З╪▒)', min_value=0, max_value=200, value=12, step=1)
    avg_rental_duration = st.number_input('┘Е╪к┘И╪│╪╖ ┘Е╪п╪й ╪з┘Д╪к╪г╪м┘К╪▒ (╪и╪з┘Д╪г┘К╪з┘Е)', min_value=1, max_value=30, value=3, step=1)
    num_rentals = st.number_input('╪╣╪п╪п ┘Е╪▒╪з╪к ╪з┘Д╪к╪г╪м┘К╪▒ ╪з┘Д╪е╪м┘Е╪з┘Д┘К', min_value=0, max_value=100, value=5, step=1)

with col2:
    st.subheader("╪к┘Б╪з╪╡┘К┘Д ╪з┘Д╪к╪г╪м┘К╪▒")
    favorite_car_type = st.selectbox('┘Ж┘И╪╣ ╪з┘Д╪│┘К╪з╪▒╪й ╪з┘Д┘Е┘Б╪╢┘Д', ['╪з┘В╪к╪╡╪з╪п┘К', '╪│┘К╪п╪з┘Ж', '╪п┘Б╪╣ ╪▒╪и╪з╪╣┘К', '┘Б╪з┘Ж', '┘Б╪з╪о╪▒╪й', '╪▒┘К╪з╪╢┘К╪й', '┘Д┘Е ┘К╪н╪п╪п'])
    rental_location = st.selectbox('┘Е┘И┘В╪╣ ╪з┘Д╪к╪г╪м┘К╪▒ ╪з┘Д╪▒╪ж┘К╪│┘К', ['╪з┘Д┘Е╪╖╪з╪▒', '┘И╪│╪╖ ╪з┘Д┘Е╪п┘К┘Ж╪й', '┘Б┘Ж╪п┘В', '┘Е╪н┘Д┘К', '╪в╪о╪▒'])
    loyalty_program = st.radio('╪╣╪╢┘И ┘Б┘К ╪и╪▒┘Ж╪з┘Е╪м ╪з┘Д┘И┘Д╪з╪б╪Я', ['┘Ж╪╣┘Е', '┘Д╪з'])

with col3:
    st.subheader("┘Е╪╣┘Д┘И┘Е╪з╪к ╪г╪о╪▒┘Й")
    avg_monthly_spend = st.slider('┘Е╪к┘И╪│╪╖ ╪з┘Д╪е┘Ж┘Б╪з┘В ╪з┘Д╪┤┘З╪▒┘К ($)', 50.0, 1000.0, 250.0)
    last_rental_days_ago = st.number_input('╪в╪о╪▒ ╪к╪г╪м┘К╪▒ (┘Е┘Ж╪░ ┘Г┘Е ┘К┘И┘Е)', min_value=0, max_value=365, value=30, step=1)
    # ┘К┘Е┘Г┘Ж ╪з╪│╪к╪и╪п╪з┘Д "╪з┘Д╪┤┘Г╪з┘И┘Й ╪з┘Д╪│╪з╪и┘В╪й" ╪и┘Е╪╣┘Д┘И┘Е╪з╪к ╪г┘Г╪л╪▒ ╪к┘Б╪╡┘К┘Д╪з┘Л ╪е╪░╪з ┘Г╪з┘Ж╪к ┘Е╪к┘И┘Б╪▒╪й
    complaints_filed = st.radio('┘З┘Д ┘Д╪п┘К┘З ╪┤┘Г╪з┘И┘Й ╪│╪з╪и┘В╪й╪Я', ['┘Ж╪╣┘Е', '┘Д╪з'])


# --- Prediction Logic ---
if st.button('╪к┘И┘В╪╣ ╪з┘Д╪к╪░╪и╪░╪и', type="primary"):
    # ╪и┘Ж╪з╪б ┘В╪з┘Е┘И╪│ ┘Е┘Ж ╪з┘Д┘Е╪п╪о┘Д╪з╪к ╪з┘Д╪о╪з┘Е ╪з┘Д╪м╪п┘К╪п╪й
    # ┘Е┘Д╪з╪н╪╕╪й: ┘З╪░┘З ╪з┘Д┘Е╪п╪о┘Д╪з╪к ┘Д╪з ╪к╪к╪╖╪з╪и┘В ┘Е╪╣ ╪з┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪н╪з┘Д┘К.
    # ┘З╪░╪з ╪з┘Д╪м╪▓╪б ┘К╪н╪к╪з╪м ┘Д╪к╪╣╪п┘К┘Д ┘Д┘К╪к┘Ж╪з╪│╪и ┘Е╪╣ ╪з┘Д╪г╪╣┘Е╪п╪й ╪и╪╣╪п get_dummies ┘Д┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪м╪п┘К╪п.
    input_data = {
        'customer_tenure': customer_tenure,
        'avg_rental_duration': avg_rental_duration,
        'num_rentals': num_rentals,
        'favorite_car_type': favorite_car_type,
        'rental_location': rental_location,
        'loyalty_program': loyalty_program,
        'avg_monthly_spend': avg_monthly_spend,
        'last_rental_days_ago': last_rental_days_ago,
        'complaints_filed': complaints_filed
    }

    # ╪к╪н┘И┘К┘Д ╪з┘Д┘Е╪п╪о┘Д╪з╪к ╪е┘Д┘Й DataFrame
    input_df = pd.DataFrame([input_data])

    # ╪к╪╖╪и┘К┘В get_dummies ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪з┘Д╪е╪п╪о╪з┘Д ╪з┘Д╪м╪п┘К╪п╪й
    # ┘К╪м╪и ╪г┘Ж ╪к┘Г┘И┘Ж ╪г╪│┘Е╪з╪б ╪з┘Д╪г╪╣┘Е╪п╪й ┘З┘Ж╪з ┘З┘К ╪з┘Д╪г╪│┘Е╪з╪б ╪з┘Д╪г╪╡┘Д┘К╪й ┘Д┘Д┘Е┘К╪▓╪з╪к ╪з┘Д┘Б╪ж┘И┘К╪й ╪з┘Д╪м╪п┘К╪п╪й.
    input_df_processed = pd.get_dummies(input_df, columns=[
        'favorite_car_type', 'rental_location', 'loyalty_program', 'complaints_filed'
    ], drop_first=True) # drop_first=True ┘З┘И ╪з┘Д╪г┘Г╪л╪▒ ╪┤┘К┘И╪╣╪з┘Л

    # ╪╢┘Е╪з┘Ж ╪г┘Ж ╪м┘Е┘К╪╣ ╪з┘Д╪г╪╣┘Е╪п╪й ╪з┘Д┘Е╪к┘И┘В╪╣╪й ┘Е┘И╪м┘И╪п╪й╪М ┘И╪к╪╣┘К┘К┘Ж ╪з┘Д┘В┘К┘Е ╪з┘Д┘Е┘Б┘В┘И╪п╪й ╪е┘Д┘Й 0
    # ┘З╪░╪з ╪н╪з╪│┘Е ╪м╪п╪з┘Л: ┘К╪м╪и ╪г┘Ж ╪к┘Г┘И┘Ж expected_columns ┘З┘Ж╪з ┘З┘К ╪г╪╣┘Е╪п╪й ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к ╪з┘Д╪н╪з┘Д┘К
    # ┘Д╪░╪з╪М ┘З╪░╪з ╪з┘Д╪м╪▓╪б ╪│┘К╪м╪╣┘Д ╪з┘Д┘Е╪п╪о┘Д╪з╪к ╪з┘Д╪м╪п┘К╪п╪й ╪к╪к┘Е╪з╪┤┘Й ┘Е╪╣ ╪г╪╣┘Е╪п╪й ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к╪М ┘Е┘Е╪з ╪│┘К╪д╪п┘К
    # ╪е┘Д┘Й ╪к┘Ж╪и╪д╪з╪к ╪║┘К╪▒ ╪╡╪н┘К╪н╪й ┘Д╪г┘Ж ╪з┘Д┘Е┘И╪п┘К┘Д ┘Д┘К╪│ ┘Е╪п╪▒╪и╪з┘Л ╪╣┘Д┘Й ┘З╪░┘З ╪з┘Д╪и┘К╪з┘Ж╪з╪к.
    final_input_df = pd.DataFrame(columns=expected_columns) #expected_columns ┘Е┘Ж ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к
    final_input_df = pd.concat([final_input_df, input_df_processed], ignore_index=True)
    final_input_df = final_input_df.fillna(0) # ╪з┘Е┘Д╪г ╪з┘Д┘В┘К┘Е ╪з┘Д┘Е┘Б┘В┘И╪п╪й ╪и┘А 0
    final_input_df = final_input_df.astype(float) # ╪к╪г┘Г╪п ╪г┘Ж ╪з┘Д╪г╪╣┘Е╪п╪й ┘Г┘Д┘З╪з ╪г╪▒┘В╪з┘Е

    # ╪е╪╣╪з╪п╪й ╪к╪▒╪к┘К╪и ╪з┘Д╪г╪╣┘Е╪п╪й ┘Д╪к╪╖╪з╪и┘В ╪к╪▒╪к┘К╪и ╪г╪╣┘Е╪п╪й ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к ╪и╪з┘Д╪╢╪и╪╖
    final_input_df = final_input_df[expected_columns]

    # ╪е╪м╪▒╪з╪б ╪з┘Д╪к┘Ж╪и╪д ╪и╪з╪│╪к╪о╪п╪з┘Е ╪з┘Д┘Ж┘Е┘И╪░╪м ╪з┘Д┘Е╪п╪▒╪и (┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к ╪з┘Д╪н╪з┘Д┘К)
    churn_prediction = model.predict(final_input_df)
    churn_proba = model.predict_proba(final_input_df)[:, 1] # ╪з╪н╪к┘Е╪з┘Д┘К╪й ╪з┘Д╪к╪░╪и╪░╪и

    st.write("---")
    st.subheader("┘Ж╪к┘К╪м╪й ╪з┘Д╪к┘Ж╪и╪д:")

    # ╪▒╪│╪з┘Д╪й ╪к╪н╪░┘К╪▒ ┘И╪з╪╢╪н╪й ╪м╪п╪з┘Л ┘Д┘Д┘Е╪│╪к╪о╪п┘Е
    st.warning("тЪая╕П ┘Е┘Д╪з╪н╪╕╪й ┘З╪з┘Е╪й: ┘З╪░╪з ╪з┘Д╪к┘Ж╪и╪д ╪║┘К╪▒ ╪п┘В┘К┘В! ╪з┘Д┘Е┘И╪п┘К┘Д ╪з┘Д╪н╪з┘Д┘К ╪к┘Е ╪к╪п╪▒┘К╪и┘З ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╣┘Е┘Д╪з╪б ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к ┘И┘Д┘К╪│ ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к. ╪з┘Д╪к┘Ж╪и╪д╪з╪к ╪│╪к┘Г┘И┘Ж ╪╣╪┤┘И╪з╪ж┘К╪й.", icon="тЪая╕П")

    if churn_prediction[0] == 1:
        st.error(f"тЪая╕П ╪з╪н╪к┘Е╪з┘Д ┘Г╪и┘К╪▒ ┘Д╪к╪░╪и╪░╪и ╪з┘Д╪╣┘Е┘К┘Д! (╪з┘Д╪з╪н╪к┘Е╪з┘Д┘К╪й: {churn_proba[0]:.2%})")
        st.write("╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к. ┘Д┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ╪к┘Ж╪и╪д╪з╪к ╪п┘В┘К┘В╪й╪М ┘К╪м╪и ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к.")
    else:
        st.success(f"тЬЕ ╪з╪н╪к┘Е╪з┘Д ┘Е┘Ж╪о┘Б╪╢ ┘Д╪к╪░╪и╪░╪и ╪з┘Д╪╣┘Е┘К┘Д. (╪з┘Д╪з╪н╪к┘Е╪з┘Д┘К╪й: {churn_proba[0]:.2%})")
        st.write("╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ┘Е┘И╪п┘К┘Д ╪з┘Д╪з╪к╪╡╪з┘Д╪з╪к. ┘Д┘Д╪н╪╡┘И┘Д ╪╣┘Д┘Й ╪к┘Ж╪и╪д╪з╪к ╪п┘В┘К┘В╪й╪М ┘К╪м╪и ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к.")

    st.write("---")
    st.info("╪з┘Д╪о╪╖┘И╪й ╪з┘Д╪к╪з┘Д┘К╪й: ╪к╪п╪▒┘К╪и ┘Е┘И╪п┘К┘Д ╪░┘Г╪з╪б ╪з╪╡╪╖┘Ж╪з╪╣┘К ╪м╪п┘К╪п ╪╣┘Д┘Й ╪и┘К╪з┘Ж╪з╪к ╪╣┘Е┘Д╪з╪б ╪к╪г╪м┘К╪▒ ╪з┘Д╪│┘К╪з╪▒╪з╪к ╪з┘Д╪н┘В┘К┘В┘К╪й╪М ┘И╪к╪н╪п┘К╪л ┘В╪з╪ж┘Е╪й ╪з┘Д╪г╪╣┘Е╪п╪й ╪з┘Д┘Е╪к┘И┘В╪╣╪й (expected_columns) ┘Б┘К ╪з┘Д┘Г┘И╪п.")


